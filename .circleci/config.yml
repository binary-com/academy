version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: Git restore cache
          keys:
            - source-v2-{{ .Branch }}-{{ .Revision }}
            - source-v2-{{ .Branch }}-
            - source-v2-
      - run:
          name: Fetch git tags
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: Compress git objects
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  bundle_install:
    description: "Bundle install"
    steps:
      - restore_cache:
          name: Bundle modules cache restore
          keys:
            - bundle-v1-{{ checksum "Gemfile" }}
            - bundle-v1-
      - run:
          name: Bundle install
          command: |
            bundle install --path ./modules
      - save_cache:
          name: Bundle modules cache save
          key: bundle-v1-{{ checksum "Gemfile" }}
          paths:
            - "modules"
  build:
    description: "Build Jekyll site"
    steps:
      - restore_cache:
          name: "Build cache restore"
          keys:
            - _site-v1-{{ .Revision }}
            - _site-v1-
      - run:
          name: Building Jekyll site
          command: bundle exec jekyll build --incremental
      - save_cache:
          name: Build cache save
          key: _site-v1-{{ .Revision }}
          paths:
            - _site
  docker_build_push:
    description: "Build Docker image"
    parameters:
      docker_image_latest_tag:
        type: string
        default: "latest-staging"
    steps:
      - setup_remote_docker
      - run:
          name: Building docker image
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            docker build -t ${DOCKHUB_ORGANISATION}/binary-static-academy:${TAG} -t ${DOCKHUB_ORGANISATION}/binary-static-academy:<< parameters.docker_image_latest_tag >> .
      - run:
          name: Pushing Image to docker hub
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/binary-static-academy:${TAG}
            docker push ${DOCKHUB_ORGANISATION}/binary-static-academy:<< parameters.docker_image_latest_tag >>
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_version:
        type: string
        default: ${CIRCLE_SHA1}
      k8s_namespace:
        type: string
        default: "academy-binary-com-staging"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service binary-academy
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            export NAMESPACE=<< parameters.k8s_namespace >>
            git clone https://github.com/binary-com/devops-ci-scripts
            cd devops-ci-scripts/k8s-build_tools
            echo $CA_CRT | base64 --decode > ca.crt
            ./release.sh binary-static-academy << parameters.k8s_version >> ${TAG}
  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for Academy with version *$(cat _site/version)*"
          success_message: "Release succeeded for Academy with version *$(cat _site/version)*"
          webhook: ${SLACK_WEBHOOK} 
jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.5
    steps:
      - git_checkout_from_cache
      - bundle_install
      - build
  release_staging:
    docker:
      - image: circleci/ruby:2.6.5
    steps:
      - git_checkout_from_cache
      - bundle_install
      - build
      - docker_build_push
      #- k8s_deploy # devops will add staging k8s manifests
      - notify_slack
  release_production:
    docker:
      - image: circleci/ruby:2.6.5
    steps:
      - git_checkout_from_cache
      - bundle_install
      - build
      - docker_build_push:
          docker_image_latest_tag: "latest"
      - k8s_deploy:
          k8s_namespace: "academy-binary-com-production"
      - notify_slack
workflows:
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^master$/
  release:
    jobs:
      - release_staging:
          filters:
            branches:
              only: /^master$/
      - release_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
          context: binary-frontend-artifact-upload
      